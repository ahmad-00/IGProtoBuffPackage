// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Error.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct IGPErrorResponse: SwiftProtobuf.ResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var igpResponse: IGPResponse {
    get {return _storage._igpResponse ?? IGPResponse()}
    set {_uniqueStorage()._igpResponse = newValue}
  }
  /// Returns true if `igpResponse` has been explicitly set.
  public var hasIgpResponse: Bool {return _storage._igpResponse != nil}
  /// Clears the value of `igpResponse`. Subsequent reads from it will return its default value.
  public mutating func clearIgpResponse() {_uniqueStorage()._igpResponse = nil}

  public var igpMajorCode: Int32 {
    get {return _storage._igpMajorCode}
    set {_uniqueStorage()._igpMajorCode = newValue}
  }

  public var igpMinorCode: Int32 {
    get {return _storage._igpMinorCode}
    set {_uniqueStorage()._igpMinorCode = newValue}
  }

  public var igpWait: Int32 {
    get {return _storage._igpWait}
    set {_uniqueStorage()._igpWait = newValue}
  }

  public var igpMessage: String {
    get {return _storage._igpMessage}
    set {_uniqueStorage()._igpMessage = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IGPErrorResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "IGPErrorResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_response"),
    2: .standard(proto: "IGP_major_code"),
    3: .standard(proto: "IGP_minor_code"),
    4: .standard(proto: "IGP_wait"),
    5: .standard(proto: "IGP_message"),
  ]

  fileprivate class _StorageClass {
    var _igpResponse: IGPResponse? = nil
    var _igpMajorCode: Int32 = 0
    var _igpMinorCode: Int32 = 0
    var _igpWait: Int32 = 0
    var _igpMessage: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpResponse = source._igpResponse
      _igpMajorCode = source._igpMajorCode
      _igpMinorCode = source._igpMinorCode
      _igpWait = source._igpWait
      _igpMessage = source._igpMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpResponse)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._igpMajorCode)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._igpMinorCode)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._igpWait)
        case 5: try decoder.decodeSingularStringField(value: &_storage._igpMessage)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._igpMajorCode != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpMajorCode, fieldNumber: 2)
      }
      if _storage._igpMinorCode != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpMinorCode, fieldNumber: 3)
      }
      if _storage._igpWait != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpWait, fieldNumber: 4)
      }
      if !_storage._igpMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpMessage, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IGPErrorResponse, rhs: IGPErrorResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._igpResponse != rhs_storage._igpResponse {return false}
        if _storage._igpMajorCode != rhs_storage._igpMajorCode {return false}
        if _storage._igpMinorCode != rhs_storage._igpMinorCode {return false}
        if _storage._igpWait != rhs_storage._igpWait {return false}
        if _storage._igpMessage != rhs_storage._igpMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
