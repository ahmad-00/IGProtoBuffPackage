// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SignalingCandidate.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct IGPSignalingCandidate: SwiftProtobuf.RequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var igpRequest: IGPRequest {
    get {return _storage._igpRequest ?? IGPRequest()}
    set {_uniqueStorage()._igpRequest = newValue}
  }
  /// Returns true if `igpRequest` has been explicitly set.
  public var hasIgpRequest: Bool {return _storage._igpRequest != nil}
  /// Clears the value of `igpRequest`. Subsequent reads from it will return its default value.
  public mutating func clearIgpRequest() {_uniqueStorage()._igpRequest = nil}

  public var igpCandidate: String {
    get {return _storage._igpCandidate}
    set {_uniqueStorage()._igpCandidate = newValue}
  }

  public var igpSdpMID: String {
    get {return _storage._igpSdpMID}
    set {_uniqueStorage()._igpSdpMID = newValue}
  }

  public var igpSdpMLineIndex: Int32 {
    get {return _storage._igpSdpMLineIndex}
    set {_uniqueStorage()._igpSdpMLineIndex = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPSignalingCandidateResponse: SwiftProtobuf.ResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var igpResponse: IGPResponse {
    get {return _storage._igpResponse ?? IGPResponse()}
    set {_uniqueStorage()._igpResponse = newValue}
  }
  /// Returns true if `igpResponse` has been explicitly set.
  public var hasIgpResponse: Bool {return _storage._igpResponse != nil}
  /// Clears the value of `igpResponse`. Subsequent reads from it will return its default value.
  public mutating func clearIgpResponse() {_uniqueStorage()._igpResponse = nil}

  public var igpPeerCandidate: String {
    get {return _storage._igpPeerCandidate}
    set {_uniqueStorage()._igpPeerCandidate = newValue}
  }

  public var igpPeerSdpMID: String {
    get {return _storage._igpPeerSdpMID}
    set {_uniqueStorage()._igpPeerSdpMID = newValue}
  }

  public var igpPeerSdpMLineIndex: Int32 {
    get {return _storage._igpPeerSdpMLineIndex}
    set {_uniqueStorage()._igpPeerSdpMLineIndex = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IGPSignalingCandidate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "IGPSignalingCandidate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_request"),
    2: .standard(proto: "IGP_candidate"),
    3: .standard(proto: "IGP_sdp_m_id"),
    4: .standard(proto: "IGP_sdp_m_line_index"),
  ]

  fileprivate class _StorageClass {
    var _igpRequest: IGPRequest? = nil
    var _igpCandidate: String = String()
    var _igpSdpMID: String = String()
    var _igpSdpMLineIndex: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpRequest = source._igpRequest
      _igpCandidate = source._igpCandidate
      _igpSdpMID = source._igpSdpMID
      _igpSdpMLineIndex = source._igpSdpMLineIndex
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpRequest)
        case 2: try decoder.decodeSingularStringField(value: &_storage._igpCandidate)
        case 3: try decoder.decodeSingularStringField(value: &_storage._igpSdpMID)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._igpSdpMLineIndex)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._igpCandidate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpCandidate, fieldNumber: 2)
      }
      if !_storage._igpSdpMID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpSdpMID, fieldNumber: 3)
      }
      if _storage._igpSdpMLineIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpSdpMLineIndex, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IGPSignalingCandidate, rhs: IGPSignalingCandidate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._igpRequest != rhs_storage._igpRequest {return false}
        if _storage._igpCandidate != rhs_storage._igpCandidate {return false}
        if _storage._igpSdpMID != rhs_storage._igpSdpMID {return false}
        if _storage._igpSdpMLineIndex != rhs_storage._igpSdpMLineIndex {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IGPSignalingCandidateResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "IGPSignalingCandidateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_response"),
    2: .standard(proto: "IGP_peer_candidate"),
    3: .standard(proto: "IGP_peer_sdp_m_id"),
    4: .standard(proto: "IGP_peer_sdp_m_line_index"),
  ]

  fileprivate class _StorageClass {
    var _igpResponse: IGPResponse? = nil
    var _igpPeerCandidate: String = String()
    var _igpPeerSdpMID: String = String()
    var _igpPeerSdpMLineIndex: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpResponse = source._igpResponse
      _igpPeerCandidate = source._igpPeerCandidate
      _igpPeerSdpMID = source._igpPeerSdpMID
      _igpPeerSdpMLineIndex = source._igpPeerSdpMLineIndex
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpResponse)
        case 2: try decoder.decodeSingularStringField(value: &_storage._igpPeerCandidate)
        case 3: try decoder.decodeSingularStringField(value: &_storage._igpPeerSdpMID)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._igpPeerSdpMLineIndex)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._igpPeerCandidate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpPeerCandidate, fieldNumber: 2)
      }
      if !_storage._igpPeerSdpMID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpPeerSdpMID, fieldNumber: 3)
      }
      if _storage._igpPeerSdpMLineIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpPeerSdpMLineIndex, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IGPSignalingCandidateResponse, rhs: IGPSignalingCandidateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._igpResponse != rhs_storage._igpResponse {return false}
        if _storage._igpPeerCandidate != rhs_storage._igpPeerCandidate {return false}
        if _storage._igpPeerSdpMID != rhs_storage._igpPeerSdpMID {return false}
        if _storage._igpPeerSdpMLineIndex != rhs_storage._igpPeerSdpMLineIndex {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
