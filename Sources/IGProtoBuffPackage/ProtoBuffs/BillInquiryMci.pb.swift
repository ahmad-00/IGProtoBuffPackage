// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: BillInquiryMci.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct IGPBillInquiryMci: SwiftProtobuf.RequestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var igpRequest: IGPRequest {
    get {return _storage._igpRequest ?? IGPRequest()}
    set {_uniqueStorage()._igpRequest = newValue}
  }
  /// Returns true if `igpRequest` has been explicitly set.
  public var hasIgpRequest: Bool {return _storage._igpRequest != nil}
  /// Clears the value of `igpRequest`. Subsequent reads from it will return its default value.
  public mutating func clearIgpRequest() {_uniqueStorage()._igpRequest = nil}

  public var igpMobileNumber: Int64 {
    get {return _storage._igpMobileNumber}
    set {_uniqueStorage()._igpMobileNumber = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPBillInquiryMciResponse: SwiftProtobuf.ResponseMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var igpResponse: IGPResponse {
    get {return _storage._igpResponse ?? IGPResponse()}
    set {_uniqueStorage()._igpResponse = newValue}
  }
  /// Returns true if `igpResponse` has been explicitly set.
  public var hasIgpResponse: Bool {return _storage._igpResponse != nil}
  /// Clears the value of `igpResponse`. Subsequent reads from it will return its default value.
  public mutating func clearIgpResponse() {_uniqueStorage()._igpResponse = nil}

  public var igpStatus: Int32 {
    get {return _storage._igpStatus}
    set {_uniqueStorage()._igpStatus = newValue}
  }

  public var igpMessage: String {
    get {return _storage._igpMessage}
    set {_uniqueStorage()._igpMessage = newValue}
  }

  public var igpMidTerm: IGPBillInquiryMciResponse.IGPBillInfo {
    get {return _storage._igpMidTerm ?? IGPBillInquiryMciResponse.IGPBillInfo()}
    set {_uniqueStorage()._igpMidTerm = newValue}
  }
  /// Returns true if `igpMidTerm` has been explicitly set.
  public var hasIgpMidTerm: Bool {return _storage._igpMidTerm != nil}
  /// Clears the value of `igpMidTerm`. Subsequent reads from it will return its default value.
  public mutating func clearIgpMidTerm() {_uniqueStorage()._igpMidTerm = nil}

  public var igpLastTerm: IGPBillInquiryMciResponse.IGPBillInfo {
    get {return _storage._igpLastTerm ?? IGPBillInquiryMciResponse.IGPBillInfo()}
    set {_uniqueStorage()._igpLastTerm = newValue}
  }
  /// Returns true if `igpLastTerm` has been explicitly set.
  public var hasIgpLastTerm: Bool {return _storage._igpLastTerm != nil}
  /// Clears the value of `igpLastTerm`. Subsequent reads from it will return its default value.
  public mutating func clearIgpLastTerm() {_uniqueStorage()._igpLastTerm = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct IGPBillInfo: SwiftProtobuf.Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var igpStatus: Int32 = 0

    public var igpBillID: Int64 = 0

    public var igpPayID: Int64 = 0

    public var igpAmount: Int64 = 0

    public var igpMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IGPBillInquiryMci: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "IGPBillInquiryMci"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_request"),
    2: .standard(proto: "IGP_mobile_number"),
  ]

  fileprivate class _StorageClass {
    var _igpRequest: IGPRequest? = nil
    var _igpMobileNumber: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpRequest = source._igpRequest
      _igpMobileNumber = source._igpMobileNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpRequest)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._igpMobileNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._igpMobileNumber != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpMobileNumber, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IGPBillInquiryMci, rhs: IGPBillInquiryMci) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._igpRequest != rhs_storage._igpRequest {return false}
        if _storage._igpMobileNumber != rhs_storage._igpMobileNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IGPBillInquiryMciResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "IGPBillInquiryMciResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_response"),
    2: .standard(proto: "IGP_status"),
    3: .standard(proto: "IGP_message"),
    4: .standard(proto: "IGP_mid_term"),
    5: .standard(proto: "IGP_last_term"),
  ]

  fileprivate class _StorageClass {
    var _igpResponse: IGPResponse? = nil
    var _igpStatus: Int32 = 0
    var _igpMessage: String = String()
    var _igpMidTerm: IGPBillInquiryMciResponse.IGPBillInfo? = nil
    var _igpLastTerm: IGPBillInquiryMciResponse.IGPBillInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpResponse = source._igpResponse
      _igpStatus = source._igpStatus
      _igpMessage = source._igpMessage
      _igpMidTerm = source._igpMidTerm
      _igpLastTerm = source._igpLastTerm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpResponse)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._igpStatus)
        case 3: try decoder.decodeSingularStringField(value: &_storage._igpMessage)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._igpMidTerm)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._igpLastTerm)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._igpStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpStatus, fieldNumber: 2)
      }
      if !_storage._igpMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpMessage, fieldNumber: 3)
      }
      if let v = _storage._igpMidTerm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._igpLastTerm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IGPBillInquiryMciResponse, rhs: IGPBillInquiryMciResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._igpResponse != rhs_storage._igpResponse {return false}
        if _storage._igpStatus != rhs_storage._igpStatus {return false}
        if _storage._igpMessage != rhs_storage._igpMessage {return false}
        if _storage._igpMidTerm != rhs_storage._igpMidTerm {return false}
        if _storage._igpLastTerm != rhs_storage._igpLastTerm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IGPBillInquiryMciResponse.IGPBillInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = IGPBillInquiryMciResponse.protoMessageName + ".IGPBillInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_status"),
    2: .standard(proto: "IGP_bill_id"),
    3: .standard(proto: "IGP_pay_id"),
    4: .standard(proto: "IGP_amount"),
    5: .standard(proto: "IGP_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.igpStatus)
      case 2: try decoder.decodeSingularInt64Field(value: &self.igpBillID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.igpPayID)
      case 4: try decoder.decodeSingularInt64Field(value: &self.igpAmount)
      case 5: try decoder.decodeSingularStringField(value: &self.igpMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.igpStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.igpStatus, fieldNumber: 1)
    }
    if self.igpBillID != 0 {
      try visitor.visitSingularInt64Field(value: self.igpBillID, fieldNumber: 2)
    }
    if self.igpPayID != 0 {
      try visitor.visitSingularInt64Field(value: self.igpPayID, fieldNumber: 3)
    }
    if self.igpAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.igpAmount, fieldNumber: 4)
    }
    if !self.igpMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.igpMessage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IGPBillInquiryMciResponse.IGPBillInfo, rhs: IGPBillInquiryMciResponse.IGPBillInfo) -> Bool {
    if lhs.igpStatus != rhs.igpStatus {return false}
    if lhs.igpBillID != rhs.igpBillID {return false}
    if lhs.igpPayID != rhs.igpPayID {return false}
    if lhs.igpAmount != rhs.igpAmount {return false}
    if lhs.igpMessage != rhs.igpMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
